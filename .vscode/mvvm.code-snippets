{
	"MVVM Component": {
		"scope": "dart",
		"prefix": "mvvm",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:mvvm_framework/mvvm_framework.dart';",
			"",
			"// coverage:ignore-start",
			"class ${1:Name} extends MVVM<${1:Name}Model, ${1:Name}View, ${1:Name}VM> {",
			"  ${1:Name}({super.key})",
			"      : super(",
			"          view: const ${1:Name}View(),",
			"          viewModel: inject<${1:Name}VM>(const ${1:Name}Model()),",
			"        );",
			"}",
			"// coverage:ignore-end",
			"",
			"class ${1:Name}View extends ViewWidget<${1:Name}VM> {",
			"  const ${1:Name}View({super.key});",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return const Placeholder();",
			"  }",
			"}",
			""
		],
		"description": "Create a MVVM component"
	},
	"MVVM View": {
		"scope": "dart",
		"prefix": "mvvm view",
		"body": [
			"class ${1:Name} extends ViewWidget<${2:ViewModelName}VM> {",
			"  const ${1:Name}({super.key});",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return const Placeholder();",
			"  }",
			"}",
		],
		"description": "Create a MVVM view widget"
	},
	"MVVM ViewModel": {
		"scope": "dart",
		"prefix": "mvvm view-model",
		"body": [
			"import 'package:injectable/injectable.dart';",
			"",
			"@injectable",
			"class VM extends ViewModel<${1:Name}Model> {",
			"  ${1:N${1:Name}ame}VM(this._repository, @factoryParam ${1:Name}Model model) : super(model: model);",
			"",
			"  final ${1:Name}Repository _repository;",
			"}",
		],
		"description": "Create a MVVM view model"
	},
	"MVVM Model": {
		"scope": "dart",
		"prefix": "mvvm model",
		"body": [
			"// coverage:ignore-file",
			"",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"import 'package:mvvm_framework/mvvm_framework.dart';",
			"",
			"part '${1:FileName}.freezed.dart';",
			"",
			"@freezed",
			"abstract class ${2:Name}Model with _$${2:Name}Model implements Model {",
			"  const factory ${2:Name}Model({",
			"    @Default(viewStatusLoading) ViewStatus viewStatus,",
			"  }) = _${2:Name}Model;",
			"",
			"  const ${2:Name}Model._();",
			"",
			"  @override",
			"  ${2:Name}Model copyWithViewStatus(ViewStatus viewStatus) => copyWith(viewStatus: viewStatus);",
			"}",
		],
		"description": "Create a MVVM model"
	},
	"MVVM Test": {
		"scope": "dart",
		"prefix": "mvvm test",
		"body": [
			"import 'package:mvvm_framework/mvvm_framework.dart';",
			"import 'package:flutter/material.dart';",
			"import 'package:flutter_test/flutter_test.dart';",
			"import 'package:mockito/mockito.dart';",
			"",
			"class Mock${1:Name}MVVM extends MVVM<${1:Name}Model, ${1:Name}View, ${1:Name}VM> {",
			"   const Mock${1:Name}MVVM({required super.viewModel, super.key})",
			"      : super(view: const ${1:Name}View());",
			"}",
			"",
			"void main() {",
			"   group('${1:Name}Page', () {",
			"     late final Mock${1:Name}VM vm;",
			"     late Widget uut;",
			"     const modelInit = ${1:Name}Model(viewStatus: viewStatusSuccess);",
			"     var model = modelInit;",
			"",
			"     setUpAll(() {",
			"      vm = Mock${1:Name}VM();",
			"      when(vm.state).thenAnswer((_) => model);",
			"     });",
			"",
			"     setUp(() => uut = AppWrapper(child: Mock${1:Name}MVVM(viewModel: vm)));",
			"",
			"     tearDown(() => model = modelInit);",
			"  });",
			"}",
		],
		"description": "Create a mock MVVM for the widget test of the MVVM view widget. Replace AppWrapper with your own wrapper widget."
	},
}